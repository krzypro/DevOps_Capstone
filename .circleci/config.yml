version: 2.1

commands:
  install_dotnet:
    steps:
      - run:
          name: Install .Net Core 6 SDK
          command: |
            sudo apt-get install wget
            wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo rm packages-microsoft-prod.deb
            sudo apt-get update; \
              sudo apt-get install -y apt-transport-https && \
              sudo apt-get update && \
              sudo apt-get install -y dotnet-sdk-6.0
  install_hadolint:
    steps:
      - run:
          name: Install hadolint
          command: |
            sudo apt-get install wget
            wget -O ~/hadolint https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64 &&\
              chmod +x ~/hadolint

jobs:
  build-app:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - install_dotnet
      - run:
          name: Check dotnet
          command: dotnet --version
      - run:
          name: Build application
          command: |
            cd testapp
            dotnet restore
            dotnet build -c Release
            dotnet publish -c Release
            ls bin/Release/net6.0/publish
      - persist_to_workspace:
          root: ./
          paths:
            - testapp/bin/Release/net6.0/publish/

  lint-app:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - install_dotnet
      - install_hadolint
      - run:
          name: Lint application
          command: |
            ~/hadolint Dockerfile
            cd testapp
            dotnet format --verify-no-changes

  docker-build:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:${CIRCLE_WORKFLOW_ID:0:7} -t ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:latest .
      - run:
          name: Save Docker image
          command: docker save -o image.tar ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX} # -${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ./
          paths: 
            - ./image.tar

  docker-publish:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:${CIRCLE_WORKFLOW_ID:0:7}
            docker push ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:latest
  
  configure-deployment-target:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk -U upgrade
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
      - run:
          name: Install AWS Cli
          command: |
            apk add --no-cache --update python3 py3-pip 
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
            aws --version
      - run:
          name: Get master K8s node
          command: |
            aws ec2 describe-instances --filters Name=tag:Name,Values="${K8S_MASTER_NODE_NAME}" \
                                  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > .circleci/ansible/k8s-plane.txt
            cat .circleci/ansible/k8s-plane.txt
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/k8s-plane.txt

  deploy-blue-environment:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk -U upgrade
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - add_ssh_keys:
          fingerprints: ["e5:bc:cc:25:fb:79:b5:64:60:7b:11:3c:ca:f9:e3:b5"]
      - attach_workspace:
          at: ./
      - run:
          name: Deploy application (blue)
          no_output_timeout: 120m
          command: |
            cd .circleci/ansible
            echo "Contents of the k8s-plane.txt file is -------"
            cat k8s-plane.txt
            export IMAGE_NAME=${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:${CIRCLE_WORKFLOW_ID:0:7}
            export BUILD_ID=${CIRCLE_WORKFLOW_ID:0:7}
            ansible-playbook -i k8s-plane.txt deploy-blue-env.yml # -vvv

  smoke-test-blue-environment:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Blue env smoke test
          command: |
            export BLUE_ENV_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values="${K8S_MASTER_NODE_NAME}" \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export BLUE_ENV_URL="http://${BLUE_ENV_IP}:30002"
            echo "BLUE ENV URL: ${BLUE_ENV_URL}"
            echo "EXPECTED STRING: Blue (${CIRCLE_WORKFLOW_ID:0:7})"

            attempts=24
            sleepSeconds=5

            while [ $attempts -gt 0 ]
            do
                if curl "${BLUE_ENV_URL}" | grep "/html"
                then
                    attempts=0
                else
                    echo "Attempts left: $attempts"
                    sleep $sleepSeconds
                    attempts=$(( $attempts - 1))
                fi
            done

            if curl "${BLUE_ENV_URL}" | grep "Blue (${CIRCLE_WORKFLOW_ID:0:7})"
            then
                exit 0
            else
                exit 1
            fi

  deploy-green-environment:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk -U upgrade
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - add_ssh_keys:
          fingerprints: ["e5:bc:cc:25:fb:79:b5:64:60:7b:11:3c:ca:f9:e3:b5"]
      - attach_workspace:
          at: ./
      - run:
          name: Configure services pre-deploy (green)
          no_output_timeout: 120m
          command: |
            ansible-playbook -i k8s-plane.txt green-pre-deploy.yml # -vvv
      - run:
          name: Deploy application (green)
          no_output_timeout: 120m
          command: |
            cd .circleci/ansible
            echo "Contents of the k8s-plane.txt file is -------"
            cat k8s-plane.txt
            export IMAGE_NAME=${DOCKER_REPOSITORY}/${DOCKER_IMAGE_PREFIX}:${CIRCLE_WORKFLOW_ID:0:7}
            export BUILD_ID=${CIRCLE_WORKFLOW_ID:0:7}
            ansible-playbook -i k8s-plane.txt deploy-green-env.yml # -vvv

workflows:
  default:
    jobs:
      - build-app

      # - lint-app:
      #     requires: [build-app]

      - docker-build:
          requires: [build-app]
          filters:
            branches:
              only: master
      #     requires: [lint-app]
      - docker-publish:
          requires: [docker-build]
          filters:
            branches:
              only: master

      - configure-deployment-target:
          requires: [docker-publish]

      - deploy-blue-environment:
          requires: [configure-deployment-target]

      - smoke-test-blue-environment:
          requires: [deploy-blue-environment]

      - authorize-green-environment-push:
          type: approval
          requires: [smoke-test-blue-environment]

      - deploy-green-environment:
          requires: [authorize-green-environment-push]